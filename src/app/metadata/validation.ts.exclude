//import * as moment from 'moment'
//import 'moment/locale/de'
//import {isNaN } from 'lodash'
import { ListRow } from "../components/core/page-data"
//mport { parseNumber, parseBoolean, isValidDate } from '../core'
/*
export type ValidationFunc<Entity> = (value: any, entity? : Entity) => Promise<any>
type DateTimeValidationOptions = { key : string , format : string }

export const validationKey = "Validation."

export async function validateDecimal(value: any): Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (isNaN(value))
      reject(validationKey + 'Decimal')
    else 
      resolve(parseNumber(value))
  })
}
export async function validateInteger(value: any):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if(value == undefined || value == null) 
      resolve(value)
    else {
      value = parseNumber(value)
      if (isNaN(value) || Math.round(value) !== value)
        reject(validationKey + 'Integer')
      else 
        resolve(value)
    }
  })
}

export async function validateBoolean(value: any):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {  
    try {
      var boolValue = parseBoolean(value)
      resolve(boolValue)
    }
    catch(error){
      reject(validationKey + 'Boolean')
    }
  })
}
export async function validateEnum(enumValue: string):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    resolve(enumValue)
  })
}
*/
/*
export async function _validateDateTime(value: any,  options : DateTimeValidationOptions):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if ((value === undefined || value === null) ) 
      resolve(value)
    else 
      if (isValidDate(value)) {
        value = moment(value, options.format, true) // strict!
        if (value.isValid()) 
          resolve(value)
        else
          reject(options.key)
      }
      else 
        reject(options.key)
  })
}
*/
export async function validateDateTime(value: any,  row? : ListRow<any>, format : string = 'L LT'): Promise<any> {
  return _validateDateTime(value, {key : validationKey + 'DateTime', format : format})
}
export function validateDate(value: any, row? : ListRow<any>, format: string = 'L'):  Promise<any> {
  return _validateDateTime(value, {key : validationKey + 'Date', format : format})
}
export function validateTime(value: any, row? : ListRow<any>, format: string = 'LT'):  Promise<any> {
  return _validateDateTime(value, {key : validationKey + 'Time', format : format})
}
export async function notBlank(value: string):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if  (!value || value.trim().length == 0) 
      reject(validationKey + 'NotBlank')
    else 
      resolve(value)
  })
}
/*
export async function notBlank2(value: string):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if  (!value || value.trim().length == 0) 
      reject(validationKey + 'NotBlank2')
    else 
      resolve(value)
  })
}
export async function blankMandatory(value: string):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if  (value?.trim().length > 0) 
      reject(validationKey + 'Blank')
    else
      resolve(value)
  })
}
export async function notZero(value: string | number):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (value === 0) 
      reject(validationKey + 'NotZero')
    else 
      resolve(value)
  })
}
export async function notTrue(value: boolean | number | string | undefined):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (parseBoolean(value) === true) 
      reject(validationKey + 'NotTrue')
    else
      resolve(value) 
  })
}
export async function notFalse(value: boolean | number | string | undefined):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (parseBoolean(value) === false) 
      reject(validationKey + 'True')
    else 
      resolve(value)
  })
}
export async function greaterThan(value: boolean | number | string | undefined, gt : number): Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (Number(value) <= gt) 
      reject({key : validationKey + 'GreaterThan', ctx : { value : value , const : gt }})
    else 
      resolve(value)
  })
}
export async function lessThan(value: boolean | number | string | undefined, lt : number):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (Number(value) >= value) 
      reject({key : validationKey + 'LessThan', ctx : { value : value, const : lt }})
    else 
      resolve(value)
  }) 
}

export async function match(value: string, matcher : { [Symbol.match](string : string)}):  Promise<any> {
  return new Promise<any>( (resolve, reject) => {
    if (value.match(matcher))
      resolve(value)
    else 
      reject({key : validationKey + 'SqlIdentifier'})  
  })
}
export async function matchVersion(value: string):  Promise<any> {
  return match(value, /n.n.n/g)
}
export async function sqlIdentifier(value: string):  Promise<any> {
  return match(value, /^[A-Za-z0-9_-]*$/g)
} 
  */

